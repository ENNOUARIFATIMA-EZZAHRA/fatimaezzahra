#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    int codepostale;
    char ville[30];  // Taille plus grande pour la ville
    char rue[30];    // Taille plus grande pour la rue
} adress;

typedef struct {
    char nome[30];   // Taille plus grande pour le nom
    int age;
    adress Add;
} personne;

int main() {
    int n, i, np;
    personne p[20];  // Tableau statique de personnes, il pourrait être dynamique si nécessaire

    printf("Donner le nombre de personnes : \n");
    scanf("%d", &n);
    getchar(); // Pour consommer le caractère de nouvelle ligne laissé par scanf

    for (i = 0; i < n; i++) {
        // Remplissage des données
        printf("Donnez les informations de la personne num %d:\n", i + 1);
        printf("Tapez le nom : ");
        fgets(p[i].nome, sizeof(p[i].nome), stdin);
        p[i].nome[strcspn(p[i].nome, "\n")] = '\0';  // Enlever le '\n' à la fin du nom

        printf("Tapez l'age : ");
        while (scanf("%d", &p[i].age) != 1) {
            printf("Veuillez entrer un age valide: ");
            while (getchar() != '\n'); // Clear the invalid input from the buffer
        }
        getchar(); // Consommer le caractère de nouvelle ligne après l'entrée de l'âge

        printf("Tapez l'adresse :\n");
        printf("Tapez le code postal : ");
        while (scanf("%d", &p[i].Add.codepostale) != 1) {
            printf("Veuillez entrer un code postal valide: ");
            while (getchar() != '\n'); // Clear the invalid input from the buffer
        }
        getchar(); // Consommer le caractère de nouvelle ligne après l'entrée du code postal

        printf("Tapez la ville : ");
        fgets(p[i].Add.ville, sizeof(p[i].Add.ville), stdin);
        p[i].Add.ville[strcspn(p[i].Add.ville, "\n")] = '\0';  // Enlever le '\n' ajouté par fgets

        printf("Tapez la rue : ");
        fgets(p[i].Add.rue, sizeof(p[i].Add.rue), stdin);
        p[i].Add.rue[strcspn(p[i].Add.rue, "\n")] = '\0';  // Enlever le '\n' ajouté par fgets
    }

    // Affichage initial des informations
    for (i = 0; i < n; i++) {
        printf("Affichage des informations de la personne %d\n", i + 1);
        printf("Le nom est : %s\n", p[i].nome);
        printf("L'âge est : %d\n", p[i].age);
        printf("Code postal est : %d\n", p[i].Add.codepostale);
        printf("La ville est : %s\n", p[i].Add.ville);
        printf("Rue est : %s\n", p[i].Add.rue);
    }

    // Demander à l'utilisateur le numéro de la personne à supprimer
    printf("Donnez le numéro de la personne à supprimer : ");
    while (scanf("%d", &np) != 1 || np < 1 || np > n) {
        printf("Veuillez entrer un numéro de personne valide (entre 1 et %d): ", n);
        while (getchar() != '\n'); // Clear the invalid input from the buffer
    }

    // Suppression de la personne
    if (np >= 1 && np <= n) {
        for (i = np - 1; i < n - 1; i++) {
            p[i] = p[i + 1];  // Décalage des éléments suivants
        }
        n--;  // Réduction du nombre de personnes
        printf("La personne %d a été supprimée.\n", np);
    }

    // Affichage des informations après suppression
    printf("Affichage des informations après suppression :\n");
    for (i = 0; i < n; i++) {
        printf("Affichage des informations de la personne %d\n", i + 1);
        printf("Le nom est : %s\n", p[i].nome);
        printf("L'âge est : %d\n", p[i].age);
        printf("Code postal est : %d\n", p[i].Add.codepostale);
        printf("La ville est : %s\n", p[i].Add.ville);
        printf("Rue est : %s\n", p[i].Add.rue);
    }

    return 0;
}
